

import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Locale;
import java.util.Map;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

public class AccountApp extends javax.swing.JFrame {

      ArrayList<String>AccountsNumber = new ArrayList<>();
    LinkedHashMap<String, Account> Accounts = new LinkedHashMap<>();
  
   
    public AccountApp() {
             
        initComponents();
        fillArrayList_HashMap();
        fillComboBox();
    }
    


    
    public void fillArrayList_HashMap()
    {
    
    AccountUtility.readAccountFile(AccountsNumber,Accounts);
    }

    public void fillComboBox()
    {
        for (String AccountsNumber : AccountsNumber) {
            AccountNumbersComboBox.addItem(AccountsNumber);
        }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        AccountNumbersComboBox = new javax.swing.JComboBox();
        OpenDateTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        CustomerNameTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        BalanceTextField = new javax.swing.JTextField();
        DepositButton = new javax.swing.JButton();
        WithdrawButton = new javax.swing.JButton();
        TransferButton = new javax.swing.JButton();
        ExitButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        AccountNumbersComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccountNumbersComboBoxActionPerformed(evt);
            }
        });

        jLabel1.setText("Open Date:");

        CustomerNameTextField.setEditable(false);

        jLabel2.setText("Customer Name: ");

        jLabel3.setText("Balance:");

        BalanceTextField.setEditable(false);

        DepositButton.setMnemonic('d');
        DepositButton.setText("Deposit");
        DepositButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DepositButtonActionPerformed(evt);
            }
        });

        WithdrawButton.setMnemonic('w');
        WithdrawButton.setText("Withdraw");
        WithdrawButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WithdrawButtonActionPerformed(evt);
            }
        });

        TransferButton.setMnemonic('t');
        TransferButton.setText("Transfer To");
        TransferButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransferButtonActionPerformed(evt);
            }
        });

        ExitButton.setMnemonic('x');
        ExitButton.setText("Exit");
        ExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Account Number");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(OpenDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 158, Short.MAX_VALUE)
                        .addComponent(CustomerNameTextField)
                        .addComponent(BalanceTextField))
                    .addComponent(AccountNumbersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(WithdrawButton)
                    .addComponent(DepositButton)
                    .addComponent(TransferButton)
                    .addComponent(ExitButton))
                .addContainerGap(14, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(AccountNumbersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(DepositButton))
                        .addGap(1, 1, 1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(WithdrawButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CustomerNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TransferButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ExitButton)
                        .addComponent(BalanceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(21, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DepositButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DepositButtonActionPerformed
        int index = AccountNumbersComboBox.getSelectedIndex();

        String accountNumber = AccountsNumber.get(index);

        Account a = Accounts.get(accountNumber);

        double amount = 0;

        // Ask how much to deposit and apply the deposit
        try {
            String tempAmount = JOptionPane.showInputDialog(this, "Enter a deposit amount for account " + a.getAccountNumber());

            if (tempAmount == null) {
                // Cancelled

                //error message
            } else {

                amount = Double.parseDouble(tempAmount);

                //at this point i should have a number 
                if (!a.deposit(amount)) {
                    throw new Exception();
                } else {
                    // if amount was successful eg. at least zero then rewrite the file with new balance data
                    AccountUtility.saveFile(Accounts);
                    BalanceTextField.setText("$" + String.format("%.2f", a.getBalance()));

                }

            }
//add a number format exception 
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Invalid deposit amount: " + amount, "Invalid deposit", JOptionPane.ERROR_MESSAGE);
            return;
        }


    }//GEN-LAST:event_DepositButtonActionPerformed

    private void ExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitButtonActionPerformed
        System.exit(0);        // TODO add your handling code here:
    }//GEN-LAST:event_ExitButtonActionPerformed

    private void AccountNumbersComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccountNumbersComboBoxActionPerformed

        String AccountNumb = (String) AccountNumbersComboBox.getSelectedItem();
        Account temp = Accounts.get(AccountNumb);
        OpenDateTextField.setText(AccountUtility.getDateFormat(temp));
        CustomerNameTextField.setText(temp.getCustomerName());
        BalanceTextField.setText("$" + String.format("%.2f", temp.getBalance()));


    }//GEN-LAST:event_AccountNumbersComboBoxActionPerformed

    private void WithdrawButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WithdrawButtonActionPerformed

        int index = AccountNumbersComboBox.getSelectedIndex();

        String accountNumber = AccountsNumber.get(index);

        Account a = Accounts.get(accountNumber);
        double amount = 0;

        // Ask how much to deposit and apply the deposit
        try {
            String tempAmount = JOptionPane.showInputDialog(this, "Enter a withdrawal amount for account " + a.getAccountNumber(), "Withdraw from " + a.getAccountNumber(), JOptionPane.PLAIN_MESSAGE);

            if (tempAmount == null) {
                // Cancelled

                //error message
            } else {

                amount = Double.parseDouble(tempAmount);

                if (!a.withdraw(amount)) {
                    throw new Exception();
                } else {

                    AccountUtility.saveFile(Accounts);
                    BalanceTextField.setText("$" + String.format("%.2f", a.getBalance()));

                }

            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Invalid wihtdraw amount: " + amount, "Invalid withdraw", JOptionPane.ERROR_MESSAGE);
            return;
        }



        
    }//GEN-LAST:event_WithdrawButtonActionPerformed

    private void TransferButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransferButtonActionPerformed
        int index = AccountNumbersComboBox.getSelectedIndex();

        String accountNumber = AccountsNumber.get(index);

        Account a = Accounts.get(accountNumber);

        String beneficiaryNumber = JOptionPane.showInputDialog(this, "Enter the beneficiary account number", "Transfer from account " + a.getAccountNumber(), JOptionPane.PLAIN_MESSAGE);
        
        
        if (beneficiaryNumber == null) {
               return;
        }
        
   Account beneficiary = AccountUtility.findAccount(beneficiaryNumber, Accounts);
        if (beneficiary == null || a == beneficiary) {
            JOptionPane.showMessageDialog(this, "Invalid beneficiary account number: " + beneficiaryNumber, "Invalid beneficiary", JOptionPane.ERROR_MESSAGE);
            return;
        }
        double amount = 0;
        try {
            String tempAmount = JOptionPane.showInputDialog(this, "Enter a withdrawal amount for account " + a.getAccountNumber(), "Withdraw from " + a.getAccountNumber(), JOptionPane.PLAIN_MESSAGE);

            if (tempAmount == null) {
                return;
            }
            amount = Double.parseDouble(tempAmount);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Invalid withdrawal amount: " + amount, "Invalid withdrawal", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        
        int transferResult = a.transferTo(beneficiary, amount);
        if (transferResult == -1) {
            JOptionPane.showMessageDialog(this, "Transfer is unsuccessful because balance is less than transfer amount and transfer fee", "Unsuccessful transfer", JOptionPane.ERROR_MESSAGE);
        } else if (transferResult == -2) {

            JOptionPane.showMessageDialog(this, "Transfer is unsuccessful because balance is less than transfer amount.", "Unsuccessful transfer", JOptionPane.ERROR_MESSAGE);

        } else if (transferResult == 0) {
            JOptionPane.showMessageDialog(this, "$" + String.format("%.2f", amount) + " was transferred to " + beneficiary.getCustomerName() + "\nNo transfer fee was applied.");
        } else if (transferResult == 1) {
            JOptionPane.showMessageDialog(this, "$" + String.format("%.2f", amount) + " was transferred to " + beneficiary.getCustomerName() + "\n$" + String.format("%.2f", AccountConstants.TRANFER_FEE) + " transfer fee was applied.");
        }
        BalanceTextField.setText("$" + String.format("%.2f", a.getBalance()));
        AccountUtility.saveFile(Accounts);


    }//GEN-LAST:event_TransferButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AccountApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
              AccountApp frame = new AccountApp();
                frame.setVisible(true);
                frame.setLocationRelativeTo(null);
            }
        });
    }
    
   
  
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox AccountNumbersComboBox;
    private javax.swing.JTextField BalanceTextField;
    private javax.swing.JTextField CustomerNameTextField;
    private javax.swing.JButton DepositButton;
    private javax.swing.JButton ExitButton;
    private javax.swing.JTextField OpenDateTextField;
    private javax.swing.JButton TransferButton;
    private javax.swing.JButton WithdrawButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
}
